preProc <- preProcess(log10(spam[,-58]+1),method="pca",pcaComp=2)
spamPC <- predict(preProc,log10(spam[,-58]+1))
plot(spamPC[,1],spamPC[,2],col=typeColor)
preProc <- preProcess(log10(training[,-58]+1),method="pca",pcaComp=2)
trainPC <- predict(preProc,log10(training[,-58]+1))
modelFit <- train(training$type ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,log10(testing[,-58]+1))
confusionMatrix(testing$type,predict(modelFit,testPC))
modelFit <- train(training$type ~ .,method="glm",preProcess="pca",data=training)
confusionMatrix(testing$type,predict(modelFit,testing))
library(caret);data(faithful); set.seed(333)
inTrain <- createDataPartition(y=faithful$waiting,
p=0.5, list=FALSE)
trainFaith <- faithful[inTrain,]; testFaith <- faithful[-inTrain,]
head(trainFaith)
plot(trainFaith$waiting,trainFaith$eruptions,pch=19,col="blue",xlab="Waiting",ylab="Duration")
lm1 <- lm(eruptions ~ waiting,data=trainFaith)
summary(lm1)
plot(trainFaith$waiting,trainFaith$eruptions,pch=19,col="blue",xlab="Waiting",ylab="Duration")
lines(trainFaith$waiting,lm1$fitted,lwd=3)
coef(lm1)[1] + coef(lm1)[2]*80
newdata <- data.frame(waiting=80)
predict(lm1,newdata)
par(mfrow=c(1,2))
plot(trainFaith$waiting,trainFaith$eruptions,pch=19,col="blue",xlab="Waiting",ylab="Duration")
lines(trainFaith$waiting,predict(lm1),lwd=3)
plot(testFaith$waiting,testFaith$eruptions,pch=19,col="blue",xlab="Waiting",ylab="Duration")
lines(testFaith$waiting,predict(lm1,newdata=testFaith),lwd=3)
# Calculate RMSE on training
sqrt(sum((lm1$fitted-trainFaith$eruptions)^2))
# Calculate RMSE on test
sqrt(sum((predict(lm1,newdata=testFaith)-testFaith$eruptions)^2))
pred1 <- predict(lm1,newdata=testFaith,interval="prediction")
ord <- order(testFaith$waiting)
plot(testFaith$waiting,testFaith$eruptions,pch=19,col="blue")
matlines(testFaith$waiting[ord],pred1[ord,],type="l",,col=c(1,2,2),lty = c(1,1,1), lwd=3)
modFit <- train(eruptions ~ waiting,data=trainFaith,method="lm")
summary(modFit$finalModel)
library(ISLR); library(ggplot2); library(caret);
data(Wage); Wage <- subset(Wage,select=-c(logwage))
summary(Wage)
inTrain <- createDataPartition(y=Wage$wage,
p=0.7, list=FALSE)
training <- Wage[inTrain,]; testing <- Wage[-inTrain,]
dim(training); dim(testing)
featurePlot(x=training[,c("age","education","jobclass")],
y = training$wage,
plot="pairs")
qplot(age,wage,data=training)
qplot(age,wage,colour=jobclass,data=training)
qplot(age,wage,colour=education,data=training)
modFit<- train(wage ~ age + jobclass + education,
method = "lm",data=training)
finMod <- modFit$finalModel
print(modFit)
plot(finMod,1,pch=19,cex=0.5,col="#00000010")
plot(finMod,1,pch=19,cex=0.5,col="#00000010")
qplot(finMod$fitted,finMod$residuals,colour=race,data=training)
plot(finMod$residuals,pch=19)
pred <- predict(modFit, testing)
qplot(wage,pred,colour=year,data=testing)
modFitAll<- train(wage ~ .,data=training,method="lm")
pred <- predict(modFitAll, testing)
qplot(wage,pred,data=testing)
install.packages("RCurl")
library(knitr); library(caret); library(RCurl)
library(ggplot2); library(caret);library(RCurl)
# Download data.
dir_data_training <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
file_data_training <- "pml-training.csv"
download.file(url=dir_data_training, destfile=file_data_training, method="curl")
dir_data_training <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
file_data_training <- "pml-training.csv"
download.file(url=dir_data_training, destfile=file_data_training, method="curl")
library(ggplot2); library(caret);library(RCurl)
# Download data.
setInternet2(use=T)
dir_data_training <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
file_data_training <- "pml-training.csv"
download.file(url=dir_data_training, destfile=file_data_training, method="curl")
dir_data_training <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
file_data_training <- "pml-training.csv"
download.file(url=dir_data_training, destfile=file_data_training)
dir_data_testing <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
file_data_testing <- "pml-testing.csv"
download.file(url=dir_data_testing, destfile=file_data_testing)
training <- read.csv(file_data_training, na.strings=c("NA",""), header=TRUE)
colnames_train <- colnames(training)
testing <- read.csv(file_data_testing, na.strings=c("NA",""), header=TRUE)
colnames_test <- colnames(testing)
summary(training)
rm(list=ls())
# Download data.
dir_data_training <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
file_data_training <- "pml-training.csv"
download.file(url=dir_data_training, destfile=file_data_training)
dir_data_testing <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
file_data_testing <- "pml-testing.csv"
download.file(url=dir_data_testing, destfile=file_data_testing)
# Import the data treating empty values as NA.
training <- read.csv(file_data_training, na.strings=c("NA",""), header=TRUE)
colnames_train <- colnames(training)
testing <- read.csv(file_data_testing, na.strings=c("NA",""), header=TRUE)
colnames_test <- colnames(testing)
View(training)
summary(training)
summary(testing)
dim(training)
dim(testing)
library(ISLR); library(ggplot2); library(caret);
data(Wage); Wage <- subset(Wage,select=-c(logwage))
summary(Wage)
View(Wage)
View(training)
View(testing)
colnames_test
summary(training)
dim(training)
dim(testing)
SubTrain <- createDataPartition(y=training$classe,
p=0.6, list=FALSE)
Subtraining <- training[SubTrain,]; Subtesting <- trining[-SubTrain,]
dim(Subtraining); dim(Subtesting)
SubTrain <- createDataPartition(y=training$classe,
p=0.6, list=FALSE)
Subtraining <- training[SubTrain,]; Subtesting <- training[-SubTrain,]
dim(Subtraining); dim(Subtesting)
featurePlot(x=Subtraining[,c("gyros_forearm_z","accel_forearm_z","magnet_forearm_z")],
y = Subtraining$classe,
plot="pairs")
featurePlot(x=Subtraining[,c("gyros_forearm_z","accel_forearm_z","magnet_forearm_z","classe")],
y = Subtraining$classe,
plot="pairs")
qplot(magnet_forearm_z,classe,data=Subtraining)
qplot(magnet_forearm_z,classe,colour=accel_forearm_z,data=Subtraining)
install.packages("rattle")
par(mar=c(0,0,0,0)); set.seed(1234); x = rep(1:4,each=4); y = rep(1:4,4)
plot(x,y,xaxt="n",yaxt="n",cex=3,col=c(rep("blue",15),rep("red",1)),pch=19)
par(mar=c(0,0,0,0));
plot(x,y,xaxt="n",yaxt="n",cex=3,col=c(rep("blue",8),rep("red",8)),pch=19)
data(iris); library(ggplot2)
names(iris)
table(iris$Species)
inTrain <- createDataPartition(y=iris$Species,
p=0.7, list=FALSE)
library(knitr); library(caret); library(rattle)
inTrain <- createDataPartition(y=iris$Species,
p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
View(testing)
qplot(Petal.Width,Sepal.Width,colour=Species,data=training)
library(caret)
modFit <- train(Species ~ .,method="rpart",data=training)
print(modFit$finalModel)
```{r, dependson="createTree", fig.height=4.5, fig.width=4.5}
plot(modFit$finalModel, uniform=TRUE,
main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
```{r, dependson="createTree", fig.height=4.5, fig.width=4.5}
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.packages("rpart.plot")
fancyRpartPlot(modFit$finalModel)
predict(modFit,newdata=testing)
```{r fig.height=4,fig.width=4,cache=TRUE}
modFit <- train(classe~ .,data=Subtraining,method="rf",prox=TRUE)
modFit <- train(classe~ .,data=Subtraining,method="rf",prox=TRUE)
modFit <- train(classe~ .,data=training,method="rf",prox=TRUE)
modFit <- train(classe~ .,data=Subtraining,method="rf",prox=TRUE)
modFit <- train(classe~ .,data=training,method="rf",prox=TRUE)
data(iris); library(ggplot2)
inTrain <- createDataPartition(y=iris$Species,
p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
```
---
## Random forests
```{r forestIris, dependson="irisData",fig.height=4,fig.width=4,cache=TRUE}
library(caret)
modFit <- train(Species~ .,data=training,method="rf",prox=TRUE)
modFit <- train(Species~ .,data=training,method="rf",prox=TRUE)
modFit
modFit <- train(classe~ .,data=training,method="rf",prox=TRUE)
SubTrain <- createDataPartition(y=training$classe,p=0.6, list=FALSE)
library(ggplot2); library(caret);library(RCurl)
# Download data.
dir_data_training <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
file_data_training <- "pml-training.csv"
download.file(url=dir_data_training, destfile=file_data_training)
dir_data_testing <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
file_data_testing <- "pml-testing.csv"
download.file(url=dir_data_testing, destfile=file_data_testing)
# Import the data treating empty values as NA.
training <- read.csv(file_data_training, na.strings=c("NA",""), header=TRUE)
colnames_train <- colnames(training)
testing <- read.csv(file_data_testing, na.strings=c("NA",""), header=TRUE)
colnames_test <- colnames(testing)
dim(training)
dim(testing)
SubTrain <- createDataPartition(y=training$classe,p=0.6, list=FALSE)
Subtraining <- training[SubTrain,]; Subtesting <- training[-SubTrain,]
dim(Subtraining); dim(Subtesting)
modFit <- train(classe~ .,data=training,method="rf",prox=TRUE)
modFit <- train(classe~ .,data=Subtraining,method="rf",prox=TRUE)
na_test = sapply(Subtraining, function(x) {sum(is.na(x))})
table(na_test)
bad_columns = names(na_test[na_test==13460])
training = training[, !names(training) %in% bad_columns]
SubTrain <- createDataPartition(y=training$classe,p=0.6, list=FALSE)
Subtraining <- training[SubTrain,]; Subtesting <- training[-SubTrain,]
dim(Subtraining); dim(Subtesting)
modFit <- train(classe~ .,data=Subtraining,method="rf",prox=TRUE)
str(training)
na_test = sapply(Subtraining, function(x) {sum(is.na(x))})
table(na_test)
bad_columns = names(na_test[na_test==13460])
training = training[, !names(training) %in% bad_columns]
str(training)
modFit <- train(classe~ .,data=Subtraining,method="rf",prox=TRUE)
training1 <- na.omit(training)
training <- read.csv(file_data_training, na.strings=c("NA",""), header=TRUE)
colnames_train <- colnames(training)
testing <- read.csv(file_data_testing, na.strings=c("NA",""), header=TRUE)
colnames_test <- colnames(testing)
dim(training)
dim(testing)
training1 <- na.omit(training)
View(training1)
View(training)
training1 <- factor(training)
rm(trining1)
rm(training1)
training1 <- factor(training)
na_test = sapply(training, function(x) {sum(is.na(x))})
table(na_test)
bad_columns = names(na_test[na_test==13460])
bad_columns = names(na_test)
training1 = training[, !names(training) %in% bad_columns]
View(training1)
View(training)
bad_columns = names(na_test)
na_test = sapply(training, function(x) {sum(is.na(x))})
table(na_test)
bad_columns = names(na_test[na_test==19216])
training1 = training[, !names(training) %in% bad_columns]
na_test = sapply(training, function(x) {sum(is.na(x))})
table(na_test)
bad_columns = names(na_test[na_test==19216])
training1 = training[, !names(training) %in% bad_columns]
SubTrain <- createDataPartition(y=training1$classe,p=0.6, list=FALSE)
Subtraining <- training1[SubTrain,]; Subtesting <- training1[-SubTrain,]
dim(Subtraining); dim(Subtesting)
modFit <- train(classe~ .,data=Subtraining,method="rf",prox=TRUE)
modFit
getTree(modFit$finalModel,k=2)
View(Subtraining)
View(training)
View(Subtraining)
str(Subtraining)
colnames(Subtraining)
data(iris); library(ggplot2)
show(iris)
View(iris)
colnames(Subtraining)
irisP <- classCenter(Subtraining[,c(55,56)], Subtraining$Classe, modFit$finalModel$prox)
irisP <- as.data.frame(irisP); irisP$classe <- rownames(irisP)
p <- qplot(accel_forearm_y, accel_forearm_z, col=classe,data=Subtraining)
p + geom_point(aes(x=accel_forearm_y,y=accel_forearm_z,col=classe),size=5,shape=4,data=Subtraining)
pred <- predict(modFit,Subtesting); Subtesting$predRight <- pred==Subtesting$classe
table(pred,Subtesting$classe)
gen_lotto<-function(){
white<-seq(1:59)
red<-31:39
probs<-white
# Decrease probabilities for commonly chosen numbers
probs[probs<=31]<-1/(2*59)
probs[probs>=32]<-1/14
# We need 5 white
w<-sample(white,5,prob=probs)
# We need 1 PowerBall
r<-sample(red,1)
# Print results
cat(" White Balls:",w[order(w)],"\n","Powerball:",r)
# Make a good warning
cat("\n Remember, your odds of winning: \n","1 in 195,249,054")
}
gen_lotto()
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode = readLines(con)
close(con)
htmlCode
library(XML)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes=T)
xpathSApply(html, "//title", xmlValue)
xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
install.packages("XML")
library(XML)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes=T)
xpathSApply(html, "//title", xmlValue)
xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
library(httr); html2 = GET(url)
content2 = content(html2,as="text")
parsedHtml = htmlParse(content2,asText=TRUE)
xpathSApply(parsedHtml, "//title", xmlValue)
google = handle("http://google.com")
pg1 = GET(handle=google,path="/")
pg2 = GET(handle=google,path="search")
install.packages("AppliedPredictiveModeling")
install.packages("ElemStatLearn")
install.packages("pgmm")
install.packages("rpart")
install.packages("gbm")
install.packages("lubridate")
install.packages("forecast")
install.packages("e1071")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
rm(list=ls())
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
rm(list = ls())
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
Vowel.train
vowel.train
vowel.test
install.packages("shiny")
install.packages("rchar")
install.packages("rCharts")
install.packages("slidify")
install.packages("Slidify")
diabetesRisk <- function(glucose) glucose / 200
library(shiny)
install.packages("shiny")
}
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
library(cars)
dataset(cars)
data(cars)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
myPlot
myPlot(50)
myPlot(200)
myPlot(20)
myPlot(2)
myPlot(5)
myPlot(45)
myPlot(1)
myPlot(0.001)
myPlot(0.01)
myPlot(0.1)
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
install.packages("rCharts")
install.packages("rCharts")
install.packages("rChart")
install.packages("devtools")
install_github('rCharts', 'ramnathv')
required(devtools)
require(devtools)
install_github('rCharts', 'ramnathv')
data(airquality)
dTable(airquality, sPaginationType = "full_numbers")
d <- data.frame(airquality, stringsAsFactors = FALSE) print(d)
airquality
head(airquality)
d <- data.frame(airquality, stringsAsFactors = FALSE)
print d
print(d)
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05,)
),
mainPanel(
plotOutput('newHist')
)
))
load(shiny)
load(Shiny)
install.packages("shiny")
load(shiny)
load(shiny)
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05,)
),
mainPanel(
plotOutput('newHist')
)
))
## ui.R
```
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h3('Sidebar text')
),
mainPanel(
h3('Main Panel text')
)
))
```
---
## server.r
```
library(shiny)
shinyServer(
function(input, output) {
}
)
```
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h3('Sidebar text')
),
mainPanel(
h3('Main Panel text')
)
))
library(shiny)
shinyServer(
function(input, output) {
}
)
## ui.R
```
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h3('Sidebar text')
),
mainPanel(
h3('Main Panel text')
)
))
```
---
## server.r
```
library(shiny)
shinyServer(
function(input, output) {
}
)
```
runapp()
runapp("D:/cpinilla/personal/DataScientific/CreatingProducts/ShinyApp.r")
runApp("D:/cpinilla/personal/DataScientific/CreatingProducts/ShinyApp.r")
runApp("D:/cpinilla/personal/DataScientific/CreatingProducts")
runApp("D:/cpinilla/personal/DataScientific/CreatingProducts")
runApp("D:/cpinilla/personal/DataScientific/CreatingProducts")
runApp("D:/cpinilla/personal/DataScientific/CreatingProducts")
runApp("D:/cpinilla/personal/DataScientific/CreatingProducts")
rm(list=ls())
setwd("D:/cpinilla/personal/DataScientific/CreatingProducts/Aplication")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
h5("A new hope", align = "center"),
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
